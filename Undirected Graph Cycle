class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool detect(int start,vector<int> adj[],vector<int>&vis)
    {
        vis[start]=1;
        queue<pair<int,int>>q;
        q.push({start,-1});
        while(!q.empty())
        {
            int node=q.front().first;
            int parent=q.front().second;
            q.pop();
            
            for(auto it : adj[node])
            {
                if(vis[it]==0)
                {
                    q.push({it,node});
                    vis[it]=1;
                }
                else
                {
                    if(parent != it)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>vis(V,0);
        
        for(int i=0;i<V;i++)
        {
            if(vis[i]==0)
            {
               if(detect(i,adj,vis))
               {
                   return true;
               }
            }
            
        }
        return false;
    }
};
